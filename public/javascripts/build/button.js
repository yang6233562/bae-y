
KISSY.add("button/base",function(S,Event,Component,ButtonRender){var KeyCodes=Event.KeyCodes;var Button=Component.Controller.extend({isButton:1,bindUI:function(){this.get("el").on("keyup",this.handleKeyEventInternal,this);},handleKeyEventInternal:function(e){if(e.keyCode==KeyCodes.ENTER&&e.type=="keydown"||e.keyCode==KeyCodes.SPACE&&e.type=="keyup"){return this.performActionInternal(e);}
return e.keyCode==KeyCodes.SPACE;},performActionInternal:function(){var self=this;if(self.get("checkable")){self.set("checked",!self.get("checked"));}
self.fire("click");}},{ATTRS:{value:{},describedby:{view:1},tooltip:{view:1},checkable:{},checked:{view:1},xrender:{value:ButtonRender}}},{xclass:'button',priority:10});return Button;},{requires:['event','component/base','./buttonRender']});KISSY.add("button",function(S,Button,Render){Button.Render=Render;return Button;},{requires:['button/base','button/buttonRender']});KISSY.add("button/buttonRender",function(S,Component){return Component.Render.extend({createDom:function(){this.get("el").attr("role","button");},_onSetChecked:function(v){var self=this,el=self.get("el"),cls=self.getCssClassWithState("checked");el[v?'addClass':'removeClass'](cls);},_onSetTooltip:function(title){this.get("el").attr("title",title);},'_onSetDescribedby':function(describedby){this.get("el").attr("aria-describedby",describedby);}},{ATTRS:{describedby:{},tooltip:{},checked:{}}});},{requires:['component/base']});